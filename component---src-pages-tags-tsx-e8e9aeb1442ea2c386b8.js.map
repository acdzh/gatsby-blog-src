{"version":3,"sources":["webpack:///./src/components/Button/index.tsx","webpack:///./src/components/Card/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["Button","children","type","className","style","onClick","clsx","Card","topStyle","topInner","bgColor","canFold","defaultFold","useStateSafe","window","innerWidth","isFolded","setIsFolded","folded","backgroundColor","role","tabIndex","aria-hidden","TagsPage","group","data","allMdx","title","padding","textAlign","margin","fontSize","lineHeight","fontWeight","color","map","item","key","fieldValue","to","replace","totalCount"],"mappings":"oHAAA,+CAqCeA,IAtB2B,SAAC,GAMrC,IALJC,EAKI,EALJA,SAKI,IAJJC,YAII,MAJG,UAIH,EAHJC,EAGI,EAHJA,UAGI,IAFJC,aAEI,MAFI,GAEJ,MADJC,eACI,MADM,KACN,EACJ,OACE,4BACEA,QAASA,EACTF,UAAWG,YAAK,SAAUH,EAAW,CACnC,kBAA4B,YAATD,EACnB,kBAA4B,YAATA,EACnB,gBAA0B,UAATA,IAEnBE,MAAOA,GAEP,yBAAKD,UAAU,qBAAqBF,M,yDChC1C,2DAwEeM,IAxDuB,SAAC,GAOjC,QANJC,gBAMI,MANO,OAMP,MALJC,gBAKI,MALO,KAKP,EAJJR,EAII,EAJJA,SAII,IAHJS,eAGI,MAHM,YAGN,MAFJC,eAEI,aADJC,mBACI,MADU,QACV,IAC4BC,YACd,SAAhBD,IACsB,oBAAXE,QAA0BA,OAAOC,WAAa,KAGrC,WAAhBH,GALCI,EADH,KACaC,EADb,KASJ,OACE,yBACEd,UAAWG,YAAK,iBAAkB,CAChCY,OAAQF,IAEVZ,MAAO,CAAEe,gBAAiB,SAAST,EAAX,MAEV,SAAbF,GACC,yBACEL,UAAWG,YACT,qBADa,uBAEUE,IAGzB,yBAAKL,UAAU,4BAA4BM,GAC1CE,GACC,yBACER,UAAU,iCACVE,QAAS,WACPY,GAAaD,IAEfI,KAAK,SACLC,UAAW,GAEX,uBACElB,UAAWG,YAAK,KAAM,CACpB,kBAAmBU,EACnB,iBAAkBA,IAEpBM,cAAY,WAMtB,yBAAKnB,UAAU,gBAAgBF,M,kCCnErC,qGAwDesB,UAnC+B,SAAC,GAAa,IAClDC,EADkD,EAAXC,KACxBC,OAAfF,MACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAM,aACX,kBAAC,IAAD,KACE,yBAAKvB,MAAO,CAAEwB,QAAS,wBACrB,wBACExB,MAAO,CACLyB,UAAW,SACXC,OAAQ,gBACRC,SAAU,OACVC,WAAY,IACZC,WAAY,IACZC,MAAO,qBAPX,QAYCV,EAAMW,KAAI,SAACC,GAAD,OACT,kBAAC,IAAD,CACEC,IAAKD,EAAKE,WACVC,GAAE,SAAWH,EAAKE,WAAWE,QAAQ,MAAO,MAE5C,kBAAC,IAAD,CAAQtC,KAAK,UAAUE,MAAO,CAAE0B,OAAQ,kBACrCM,EAAKE,WADR,KACsBF,EAAKK,WAD3B","file":"component---src-pages-tags-tsx-e8e9aeb1442ea2c386b8.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport './index.scss';\n\ntype ButtonPropsType = {\n  children?: React.ReactNode;\n  href?: string;\n  type?: 'primary' | 'outline' | 'const';\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  round?: boolean;\n\n  className?: string;\n  style?: React.CSSProperties;\n};\n\nconst Button: React.FC<ButtonPropsType> = ({\n  children,\n  type = 'outline',\n  className,\n  style = {},\n  onClick = null,\n}) => {\n  return (\n    <button\n      onClick={onClick}\n      className={clsx('button', className, {\n        'button--primary': type === 'primary',\n        'button--outline': type === 'outline',\n        'button--const': type === 'const',\n      })}\n      style={style}\n    >\n      <div className=\"button__container\">{children}</div>\n    </button>\n  );\n};\n\nexport default Button;\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport { useStateSafe } from '../../hooks/useStateSafe';\nimport clsx from 'clsx';\n\nimport './index.css';\n\nexport type CardPropsType = {\n  topStyle?: 'none' | 'const' | 'primary';\n  topInner?: React.ReactNode;\n  children?: React.ReactNode;\n  bgColor?: string;\n  canFold?: boolean;\n  defaultFold?: 'auto' | 'never' | 'always';\n};\n\nconst Card: React.FC<CardPropsType> = ({\n  topStyle = 'none',\n  topInner = null,\n  children,\n  bgColor = 'BgPrimary',\n  canFold = true,\n  defaultFold = 'never',\n}) => {\n  const [isFolded, setIsFolded] = useStateSafe<boolean>(\n    defaultFold === 'auto'\n      ? typeof window === 'undefined' || window.innerWidth > 812\n        ? false\n        : true\n      : defaultFold === 'always'\n  );\n\n  return (\n    <div\n      className={clsx('card-container', {\n        folded: isFolded,\n      })}\n      style={{ backgroundColor: `var(--${bgColor})` }}\n    >\n      {topStyle !== 'none' && (\n        <div\n          className={clsx(\n            'card-container-top',\n            `card-container-top__${topStyle}`\n          )}\n        >\n          <div className=\"card-container-top-inner\">{topInner}</div>\n          {canFold && (\n            <div\n              className=\"card-container-top-fold-button\"\n              onClick={() => {\n                setIsFolded(!isFolded);\n              }}\n              role=\"button\"\n              tabIndex={-1}\n            >\n              <i\n                className={clsx('fa', {\n                  'fa-chevron-down': isFolded,\n                  'fa-chevron-up': !isFolded,\n                })}\n                aria-hidden=\"true\"\n              ></i>\n            </div>\n          )}\n        </div>\n      )}\n      <div className=\"card-content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Card;\n","// sync from categories\nimport React from 'react';\nimport { graphql } from 'gatsby';\nimport Link from 'gatsby-link';\n\nimport Card from '../components/Card';\nimport Button from '../components/Button';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\ntype TagsPagePropsType = {\n  data: {\n    allMdx: {\n      group: Array<{\n        fieldValue: string;\n        totalCount: number;\n      }>;\n    };\n  };\n};\n\nconst TagsPage: React.FC<TagsPagePropsType> = ({ data }) => {\n  const { group } = data.allMdx;\n  return (\n    <Layout>\n      <SEO title=\"All Tags\" />\n      <Card>\n        <div style={{ padding: '20px 30px 20px 30px' }}>\n          <h1\n            style={{\n              textAlign: 'center',\n              margin: '10px 0 20px 0',\n              fontSize: '32px',\n              lineHeight: 1.2,\n              fontWeight: 400,\n              color: 'var(--TextTitle)',\n            }}\n          >\n            Tags\n          </h1>\n          {group.map((item) => (\n            <Link\n              key={item.fieldValue}\n              to={`/tags/${item.fieldValue.replace(/\\s/g, '-')}`}\n            >\n              <Button type=\"outline\" style={{ margin: '0 10px 10px 0' }}>\n                {item.fieldValue} ({item.totalCount})\n              </Button>\n            </Link>\n          ))}\n        </div>\n      </Card>\n    </Layout>\n  );\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMdx(filter: { frontmatter: { draft: { in: [false, null] } } }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}